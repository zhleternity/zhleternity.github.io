<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog of zhleternity</title>
  <subtitle>Step by step</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhleternity.github.io/"/>
  <updated>2017-04-27T08:40:14.410Z</updated>
  <id>http://zhleternity.github.io/</id>
  
  <author>
    <name>zhleternity</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to generate .rec file with im2rec.py in MXNet</title>
    <link href="http://zhleternity.github.io/2017/04/27/How-to-generate-rec-file-with-im2rec-py-in-MXNet/"/>
    <id>http://zhleternity.github.io/2017/04/27/How-to-generate-rec-file-with-im2rec-py-in-MXNet/</id>
    <published>2017-04-27T08:38:39.000Z</published>
    <updated>2017-04-27T08:40:14.410Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p>
<hr>
<p>##第一步：生成list文件<br>首先，在你的MXNet目录下找到im2rec.py的位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/mxnet/tools/im2rec.py</div></pre></td></tr></table></figure></p>
<p>其次，准备好你要用来生成rec文件的数据集，存放在某个目录下，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/xxx/data/</div></pre></td></tr></table></figure></p>
<p>现在，我们可以开始生成list文件了，文件后缀为：.lst</p>
<blockquote>
<p> python ~/mxnet/tools/im2rec.py –list True –recursive True  –train-ratio 0.9 myData /home/xxx/data/ </p>
</blockquote>
<hr>
<p>对上面的参数进行解释：</p>
<p><strong>–list</strong>：当要生成list文件时，这个参数一定要设为True，表示当前用来生成的list文件；默认是生成rec文件；</p>
<p><strong>–recursive</strong>：递归的遍历你的所有数据集，要设为True；</p>
<p><strong>–train-ratio</strong>：用来将你的全部数据集拆分成两部分：训练集（train）和交叉验证集（val），具体多少作为训练集，多少作为验证集，就由这个参数来确定；</p>
<p><strong>–test-ratio</strong>：同上，分成训练集和测试集两部分；</p>
<p><strong>–exts</strong>：这个是你数据的后缀（注，这里我们一般说的图片数据），目前的MXNet只支持两种图片格式：jpg和jpeg，所以如果你的图片是png格式，可以对im2rec.py作如下修改：<br>将：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cgroup.add_argument(&apos;--exts&apos;, type=list, default=[&apos;.jpeg&apos;, &apos;.jpg&apos;], help=&apos;list of acceptable image extensions.&apos;)</div></pre></td></tr></table></figure></p>
<p>改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cgroup.add_argument(&apos;--exts&apos;, type=list, default=[&apos;.jpeg&apos;, &apos;.jpg&apos;, &apos;.png&apos;], help=&apos;list of acceptable image extensions.&apos;)</div></pre></td></tr></table></figure></p>
<p>就OK了。</p>
<p><strong>prefix</strong>：这里指的是你要生成list文件的前缀名，我这里命名为myData；</p>
<p><strong>root</strong>：这里指的是你的图片数据存放的路径；</p>
<p>不一一列出了，如果你想要知道更多的参数用法，可以如下：</p>
<blockquote>
<p>python ~/mxnet/tools/im2rec.py –help</p>
</blockquote>
<p>或者你直接打开im2rec.py文件进行查看；</p>
<hr>
<p>执行完这个命令，你会发现生成两个文件：myData_train.lst和myData_val.lst</p>
<hr>
<p>##第二步：生成rec文件<br>有了第一步生成的list文件，我们就可以很easy的生成mxnet需要的文件格式rec文件了。</p>
<blockquote>
<p>python ~/mxnet/tools/im2rec.py –num-thread 4 –pass-through 1 myData /home/xxx/data/</p>
</blockquote>
<p>上面命令中的参数跟第一步差不多，有一个参数要注意：</p>
<p><strong>–pass-through</strong>: 设为1，即跳过矩阵变换，否则会报错：未知的array type；</p>
<p>myData就是第一步中生成.lst文件的前缀，这里用它来生成rec；</p>
<p>执行完这条命令，你就会看到两个文件：myData_train.rec和myData_val.rec</p>
<p>结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;##第一步：生成list文件&lt;br&gt;首先，在你的MXNet目录下找到im2rec.py的位置：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Learn to train and predict model under MXNet</title>
    <link href="http://zhleternity.github.io/2017/02/28/Learn-to-train-and-predict-model-under-MXNet/"/>
    <id>http://zhleternity.github.io/2017/02/28/Learn-to-train-and-predict-model-under-MXNet/</id>
    <published>2017-02-28T04:12:30.000Z</published>
    <updated>2017-02-28T08:03:05.688Z</updated>
    
    <content type="html"><![CDATA[<p>##Prepare the input data<br>Because the input data’s formt of MXNet is rec,so we must turn the image into the .rec format,as folow:</p>
<p>First, we prepare some face images data stored in ‘test_face’ file:</p>
<p><img src="http://i.imgur.com/A1vbdS7.png" alt=""></p>
<p>  step1:build the txt or lst format from the images<br>Now,we have so many images in hand.Next,we make some changes to them that generate a list or a txt about the images.As for the list or txt,its format as folllows:</p>
<p><img src="http://i.imgur.com/69EmuV4.png" alt=""><br>To see explicitly,we can see an image below:</p>
<p><img src="http://i.imgur.com/nGcVVdW.png" alt=""></p>
<p>Of course, we still need the test.lst or test.txt.</p>
<p>  step2:generate the .rec from txt or lst</p>
<p>Under our MXNet root diretory,we can see</p>
<p><img src="http://i.imgur.com/KKjUbzZ.png" alt=""></p>
<p>so,we can build the rec doc by using ‘im2rec’.</p>
<p>The comman as folows:</p>
<p><img src="http://i.imgur.com/RpqcNnZ.png" alt=""></p>
<p>Here,we can see three parameters.They are:</p>
<p>the first param: the path of your lst or txt have been build;</p>
<p>the second one: the path of your images;</p>
<p>the third one: the path of your .rec.</p>
<p>OK,so far we have the rec doc of train data,but we still lack the rec of test data.In that,we can generate the test.rec with the same method.Finally,you can get four files:</p>
<p><img src="http://i.imgur.com/C2Um9eF.png" alt=""></p>
<p>Good luck! </p>
<a id="more"></a>
<p>##Construct the net<br>In this step,we can construct the net ourselves,but at first best do not.Because we can use the off-the-shelf models or net to achieve more higher use.And furthermore,it can save twists and turns at first.And it is so-called ‘standing on the shoulders of giants’.Hence,the simplest way is to make a little change on the off-th-shelf net.</p>
<p>As for the off-the-shelf examples,we can find under ‘mxnet/examples/image-classification/‘ and ‘mxnet/tests/python/‘ .</p>
<p>step1:New a folder named ‘MyTrainMxnet’;the folder path is freewill;</p>
<p>step2:Copy four files below to th new folder ‘MyTrainMxnet’;</p>
<p><img src="http://i.imgur.com/CxEZ7uL.png" alt=""></p>
<p>Attention:Here we choose the ineption-bn-28-small net,of course, you can choose others,e.g alexnet..</p>
<p>step3:Let’s make some changes.</p>
<p>1.Rename the ‘symbol_inception-bn-28-small.py’ as ‘my-inception.py’;</p>
<p>2.Rename the ‘train_mnist.py’ as ‘train_face.py’;</p>
<p>3.Open ‘train_face.py’ and do some changes;</p>
<p><img src="http://i.imgur.com/VaqYxSF.png" alt=""></p>
<p><img src="http://i.imgur.com/qwSMJeE.png" alt=""></p>
<p><img src="http://i.imgur.com/0f8EGow.png" alt=""></p>
<p>Delete the ‘symbol’,otherwise your model file must begin with ‘symbol’.</p>
<p>##Train the model</p>
<p>Of course we can choose not  do these changes.Instead,we can add ‘–network’ and ‘–data-dir’ in the command,as folows:</p>
<p><img src="http://i.imgur.com/PmhYA4P.png" alt=""></p>
<p>In addition, we can add other params if we need in the command above.</p>
<p>Attention:If you want to save the trained-well model after every epoch,please must add ‘–model-prefix’.And you will get it when making prediction afterwards.</p>
<p><img src="http://i.imgur.com/oaNWGT0.png" alt=""></p>
<p>Ok,the training step may need much time when cpu-only.So we can wait in patience.</p>
<p>##Make a prediction</p>
<p>When you complete the training work,you will find:</p>
<p><img src="http://i.imgur.com/zZXCneQ.png" alt=""></p>
<p>Now,we can make a prediction using the test data.</p>
<p>First,we need write a prediction file named ‘predict_face.py’,its contents as follow:</p>
<p><img src="http://i.imgur.com/F4bju8C.png" alt=""></p>
<p>Attention:Remember to change the path into yours.</p>
<p>Ok,hereto it’s over.</p>
<p>If yu want to make predition using new data,please keep attention.</p>
<p>Be continued!</p>
]]></content>
    
    <summary type="html">
    
      Learning how to train a model using our own dat,and make predictions using the trained model.
    
    </summary>
    
    
      <category term="mxnet" scheme="http://zhleternity.github.io/tags/mxnet/"/>
    
      <category term="train" scheme="http://zhleternity.github.io/tags/train/"/>
    
      <category term="predict" scheme="http://zhleternity.github.io/tags/predict/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhleternity.github.io/2017/02/23/hello-world/"/>
    <id>http://zhleternity.github.io/2017/02/23/hello-world/</id>
    <published>2017-02-23T08:21:07.826Z</published>
    <updated>2017-02-24T08:25:53.385Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/OJnBd57.jpg" alt=""><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/OJnBd57.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This 
    
    </summary>
    
    
  </entry>
  
</feed>
