<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[How to generate .rec file with im2rec.py in MXNet]]></title>
      <url>%2F2017%2F04%2F27%2FHow-to-generate-rec-file-with-im2rec-py-in-MXNet%2F</url>
      <content type="text"><![CDATA[[TOC] 第一步：生成list文件首先，在你的MXNet目录下找到im2rec.py的位置： 1~/mxnet/tools/im2rec.py 其次，准备好你要用来生成rec文件的数据集，存放在某个目录下，如： 1/home/xxx/data/ 现在，我们可以开始生成list文件了，文件后缀为：.lst python ~/mxnet/tools/im2rec.py –list True –recursive True –train-ratio 0.9 myData /home/xxx/data/ 对上面的参数进行解释： –list：当要生成list文件时，这个参数一定要设为True，表示当前用来生成的list文件；默认是生成rec文件； –recursive：递归的遍历你的所有数据集，要设为True； –train-ratio：用来将你的全部数据集拆分成两部分：训练集（train）和交叉验证集（val），具体多少作为训练集，多少作为验证集，就由这个参数来确定； –test-ratio：同上，分成训练集和测试集两部分； –exts：这个是你数据的后缀（注，这里我们一般说的图片数据），目前的MXNet只支持两种图片格式：jpg和jpeg，所以如果你的图片是png格式，可以对im2rec.py作如下修改：将： 1cgroup.add_argument(&apos;--exts&apos;, type=list, default=[&apos;.jpeg&apos;, &apos;.jpg&apos;], help=&apos;list of acceptable image extensions.&apos;) 改成： 1cgroup.add_argument(&apos;--exts&apos;, type=list, default=[&apos;.jpeg&apos;, &apos;.jpg&apos;, &apos;.png&apos;], help=&apos;list of acceptable image extensions.&apos;) 就OK了。 prefix：这里指的是你要生成list文件的前缀名，我这里命名为myData； root：这里指的是你的图片数据存放的路径； 不一一列出了，如果你想要知道更多的参数用法，可以如下： python ~/mxnet/tools/im2rec.py –help 或者你直接打开im2rec.py文件进行查看； 执行完这个命令，你会发现生成两个文件：myData_train.lst和myData_val.lst 第二步：生成rec文件有了第一步生成的list文件，我们就可以很easy的生成mxnet需要的文件格式rec文件了。 python ~/mxnet/tools/im2rec.py –num-thread 4 –pass-through 1 myData /home/xxx/data/ 上面命令中的参数跟第一步差不多，有一个参数要注意： –pass-through: 设为1，即跳过矩阵变换，否则会报错：未知的array type； myData就是第一步中生成.lst文件的前缀，这里用它来生成rec； 执行完这条命令，你就会看到两个文件：myData_train.rec和myData_val.rec 结束。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Learn to train and predict model under MXNet]]></title>
      <url>%2F2017%2F02%2F28%2FLearn-to-train-and-predict-model-under-MXNet%2F</url>
      <content type="text"><![CDATA[Prepare the input dataBecause the input data’s formt of MXNet is rec,so we must turn the image into the .rec format,as folow: First, we prepare some face images data stored in ‘test_face’ file: step1:build the txt or lst format from the imagesNow,we have so many images in hand.Next,we make some changes to them that generate a list or a txt about the images.As for the list or txt,its format as folllows: To see explicitly,we can see an image below: Of course, we still need the test.lst or test.txt. step2:generate the .rec from txt or lstUnder our MXNet root diretory,we can see so,we can build the rec doc by using ‘im2rec’. The comman as folows: Here,we can see three parameters.They are: the first param: the path of your lst or txt have been build; the second one: the path of your images; the third one: the path of your .rec. OK,so far we have the rec doc of train data,but we still lack the rec of test data.In that,we can generate the test.rec with the same method.Finally,you can get four files: Good luck! Construct the netIn this step,we can construct the net ourselves,but at first best do not.Because we can use the off-the-shelf models or net to achieve more higher use.And furthermore,it can save twists and turns at first.And it is so-called ‘standing on the shoulders of giants’.Hence,the simplest way is to make a little change on the off-th-shelf net. As for the off-the-shelf examples,we can find under ‘mxnet/examples/image-classification/‘ and ‘mxnet/tests/python/‘ . step1:New a folder named ‘MyTrainMxnet’;the folder path is freewill;step2:Copy four files below to th new folder ‘MyTrainMxnet’; Attention:Here we choose the ineption-bn-28-small net,of course, you can choose others,e.g alexnet.. step3:Let’s make some changes.1.Rename the ‘symbol_inception-bn-28-small.py’ as ‘my-inception.py’; 2.Rename the ‘train_mnist.py’ as ‘train_face.py’; 3.Open ‘train_face.py’ and do some changes; Delete the ‘symbol’,otherwise your model file must begin with ‘symbol’. ##Train the model Of course we can choose not do these changes.Instead,we can add ‘–network’ and ‘–data-dir’ in the command,as folows: In addition, we can add other params if we need in the command above. Attention:If you want to save the trained-well model after every epoch,please must add ‘–model-prefix’.And you will get it when making prediction afterwards. Ok,the training step may need much time when cpu-only.So we can wait in patience. Make a predictionWhen you complete the training work,you will find: Now,we can make a prediction using the test data. First,we need write a prediction file named ‘predict_face.py’,its contents as follow: Attention:Remember to change the path into yours. Ok,hereto it’s over. If yu want to make predition using new data,please keep attention. Be continued!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F23%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
